/* The following code was generated by JFlex 1.4.3 on 10/19/10 5:01 PM */

/*
 * Copyright 2010 David Yeung
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.coffeescript.lang.lexer;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/19/10 5:01 PM from the specification file
 * <tt>/Users/michi/Repositories/coffeescript-idea/src/org/coffeescript/lang/lexer/CoffeeScript.flex</tt>
 */
public class _CoffeeScriptLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int REGULAR_EXPRESSION = 8;
  public static final int VERB = 10;
  public static final int REGULAR_EXPRESSION_FLAG = 12;
  public static final int HEREDOCS = 18;
  public static final int DOUBLE_QUOTE_STRING = 4;
  public static final int SINGLE_QUOTE_STRING = 6;
  public static final int YYINITIAL = 0;
  public static final int NOUN = 2;
  public static final int JAVASCRIPT = 16;
  public static final int NOUN_OR_VERB = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\20\2\0\1\2\22\0\1\32\1\14\1\25\1\17"+
    "\1\3\1\55\1\56\1\26\1\66\1\62\1\55\1\15\1\63\1\13"+
    "\1\11\1\30\1\5\11\4\1\22\1\64\1\60\1\16\1\21\1\55"+
    "\1\65\6\10\11\3\1\54\7\3\1\7\2\3\1\67\1\27\1\70"+
    "\1\61\1\53\1\33\1\35\1\73\1\34\1\37\1\12\1\40\1\31"+
    "\1\50\1\45\1\3\1\74\1\42\1\51\1\44\1\23\1\52\1\3"+
    "\1\24\1\36\1\43\1\41\1\46\1\47\1\6\1\72\1\3\1\75"+
    "\1\57\1\71\1\61\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\3\0\1\2\1\3\1\4\1\5\2\6"+
    "\1\5\3\7\1\2\1\10\2\5\1\11\1\12\1\13"+
    "\15\5\2\2\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\2\5\1\23\1\24\1\5\1\25\1\5\1\7"+
    "\6\5\1\26\1\27\1\2\1\26\1\30\1\31\1\2"+
    "\1\32\1\33\1\2\3\7\1\34\1\7\1\34\10\2"+
    "\3\7\1\35\1\36\1\1\3\5\1\37\1\40\3\41"+
    "\3\0\3\5\1\42\2\10\2\43\1\44\1\5\2\0"+
    "\7\5\1\45\12\5\1\44\2\5\1\43\12\5\1\43"+
    "\1\46\3\5\1\47\1\50\1\51\1\32\1\7\1\0"+
    "\1\7\1\43\5\0\2\43\1\0\1\1\1\43\1\5"+
    "\1\43\2\0\2\6\1\0\1\6\4\5\1\10\1\5"+
    "\1\52\32\5\1\25\1\5\1\32\1\0\1\34\3\0"+
    "\1\1\1\5\1\53\2\5\1\10\1\0\10\5\1\54"+
    "\6\5\1\32\1\0\1\1\1\5\1\10\1\0\10\5"+
    "\1\32\1\0\1\55\1\0\6\5\1\55\5\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u026c\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u026c\0\u03e0\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u026c\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a"+
    "\0\u08b8\0\u08f6\0\u026c\0\u026c\0\u026c\0\u026c\0\u026c\0\u026c"+
    "\0\u026c\0\u0934\0\u0972\0\u026c\0\u026c\0\u09b0\0\u03e0\0\u09ee"+
    "\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde"+
    "\0\u026c\0\u0c1c\0\u0c5a\0\u0c98\0\u026c\0\u0cd6\0\u0d14\0\u0d52"+
    "\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u08b8"+
    "\0\u08f6\0\u1132\0\u026c\0\u026c\0\u1170\0\u11ae\0\u11ec\0\u122a"+
    "\0\u1268\0\u026c\0\u026c\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e"+
    "\0\u13dc\0\u141a\0\u1458\0\u026c\0\u1496\0\u14d4\0\u02e8\0\u1512"+
    "\0\u02e8\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4"+
    "\0\u1702\0\u1740\0\u177e\0\u02e8\0\u17bc\0\u17fa\0\u1838\0\u1876"+
    "\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66"+
    "\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56"+
    "\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u026c\0\u1dca\0\u1e08"+
    "\0\u1e46\0\u026c\0\u026c\0\u026c\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u026c"+
    "\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u1b20\0\u2226\0\u2264\0\u22a2"+
    "\0\u22e0\0\u22e0\0\u139e\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416"+
    "\0\u2454\0\u026c\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8"+
    "\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8"+
    "\0\u27f6\0\u2834\0\u2872\0\u1a28\0\u28b0\0\u28ee\0\u292c\0\u296a"+
    "\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u026c\0\u2aa0\0\u2ade\0\u2b1c"+
    "\0\u026c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u026c\0\u2c90"+
    "\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80"+
    "\0\u2ebe\0\u2efc\0\u2f3a\0\u02e8\0\u2f78\0\u2fb6\0\u2ff4\0\u3032"+
    "\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u026c\0\u3168\0\u31a6\0\u31e4"+
    "\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4"+
    "\0\u026c\0\u3412\0\u31a6\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548"+
    "\0\u3586\0\u35c4\0\u3450\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\16\1\17\1\20\3\16\1\13"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\15\2\13"+
    "\1\27\1\30\1\31\1\32\1\13\1\24\1\16\1\14"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\3\16\1\50\1\16"+
    "\1\24\1\51\1\52\2\13\1\53\1\13\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\16\1\64"+
    "\1\13\1\14\1\65\1\16\1\17\1\20\3\16\1\13"+
    "\1\66\1\22\1\23\1\24\1\67\1\26\1\65\2\13"+
    "\1\70\1\30\1\31\1\32\1\13\1\71\1\16\1\14"+
    "\1\33\1\72\1\35\1\36\1\73\1\74\1\41\1\16"+
    "\1\43\1\75\1\76\1\16\1\77\5\16\1\24\1\51"+
    "\1\52\2\13\1\53\2\13\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\16\1\64\2\100\1\15\15\100"+
    "\1\15\4\100\1\101\1\100\1\102\46\100\2\103\1\15"+
    "\15\103\1\15\5\103\1\101\1\102\46\103\2\104\1\105"+
    "\15\104\1\105\6\104\1\106\1\107\45\104\1\13\1\14"+
    "\1\65\6\13\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\26\1\65\1\116\1\117\1\120\4\13\1\24\1\13"+
    "\1\14\2\13\1\121\2\13\1\122\1\123\1\13\1\124"+
    "\1\125\1\126\1\13\1\127\5\13\1\24\1\130\1\131"+
    "\1\132\1\24\1\133\1\134\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\24\13\1\0\10\13\1\135\13\13\1\135"+
    "\3\13\1\135\20\13\1\135\4\13\1\14\1\65\1\16"+
    "\1\17\1\20\3\16\1\110\1\66\1\112\1\113\1\114"+
    "\1\115\1\26\1\65\1\116\1\117\1\136\1\30\1\31"+
    "\1\32\1\13\1\24\1\16\1\14\1\33\1\72\1\35"+
    "\1\36\1\73\1\74\1\41\1\16\1\137\1\75\1\140"+
    "\1\16\1\77\5\16\1\24\1\130\1\131\1\132\1\24"+
    "\1\133\1\134\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\16\1\64\33\141\1\142\42\141\2\143"+
    "\1\15\15\143\1\15\4\143\1\144\1\145\47\143\77\0"+
    "\1\14\15\0\1\26\12\0\1\14\46\0\6\16\1\0"+
    "\1\16\10\0\2\16\4\0\1\16\2\0\21\16\15\0"+
    "\3\16\5\0\2\17\3\0\1\146\1\147\67\0\2\17"+
    "\2\150\1\0\1\146\1\147\66\0\3\16\1\151\2\16"+
    "\1\0\1\16\10\0\2\16\4\0\1\16\2\0\6\16"+
    "\1\152\1\16\1\153\10\16\15\0\3\16\22\0\1\154"+
    "\70\0\1\24\61\0\17\155\1\156\1\0\55\155\3\0"+
    "\6\16\1\0\1\16\10\0\1\16\1\157\4\0\1\16"+
    "\2\0\4\16\1\160\3\16\1\161\10\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\162\10\0\2\16\4\0\1\16"+
    "\2\0\21\16\15\0\3\16\26\0\1\163\76\0\1\164"+
    "\52\0\6\16\1\0\1\16\10\0\1\165\1\16\4\0"+
    "\1\16\2\0\1\16\1\166\4\16\1\167\12\16\15\0"+
    "\3\16\4\0\6\16\1\0\1\16\10\0\2\16\4\0"+
    "\1\16\2\0\10\16\1\170\10\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\16\10\0\2\16\4\0\1\16\2\0"+
    "\5\16\1\171\5\16\1\172\5\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\173\10\0\1\174\1\16\4\0\1\16"+
    "\2\0\21\16\15\0\3\16\4\0\6\16\1\0\1\16"+
    "\10\0\1\175\1\16\4\0\1\16\2\0\1\16\1\176"+
    "\3\16\1\177\3\16\1\200\7\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\16\10\0\2\16\4\0\1\16\2\0"+
    "\10\16\1\201\10\16\15\0\3\16\4\0\6\16\1\0"+
    "\1\202\10\0\2\16\4\0\1\16\2\0\21\16\15\0"+
    "\3\16\4\0\6\16\1\0\1\16\10\0\1\16\1\203"+
    "\4\0\1\16\2\0\14\16\1\204\4\16\15\0\1\205"+
    "\2\16\4\0\6\16\1\0\1\206\10\0\1\207\1\16"+
    "\4\0\1\16\2\0\1\16\1\210\3\16\1\211\13\16"+
    "\15\0\3\16\4\0\6\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\2\16\1\212\1\16\1\157\3\16"+
    "\1\213\4\16\1\214\3\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\16\10\0\1\215\1\16\4\0\1\16\2\0"+
    "\1\16\1\216\17\16\15\0\3\16\4\0\6\16\1\0"+
    "\1\16\10\0\2\16\4\0\1\16\2\0\11\16\1\217"+
    "\2\16\1\220\4\16\15\0\3\16\4\0\6\16\1\0"+
    "\1\16\10\0\2\16\4\0\1\16\2\0\17\16\1\221"+
    "\1\16\15\0\3\16\57\0\1\24\76\0\1\24\21\0"+
    "\6\16\1\0\1\222\10\0\2\16\4\0\1\16\2\0"+
    "\21\16\15\0\3\16\4\0\6\16\1\0\1\16\10\0"+
    "\1\16\1\223\4\0\1\16\2\0\21\16\15\0\1\157"+
    "\2\16\4\0\3\16\1\224\2\16\1\0\1\16\10\0"+
    "\2\16\4\0\1\16\2\0\6\16\1\152\12\16\15\0"+
    "\3\16\4\0\6\16\1\0\1\16\10\0\1\16\1\225"+
    "\4\0\1\16\2\0\4\16\1\160\3\16\1\161\10\16"+
    "\15\0\3\16\1\0\32\226\1\0\43\226\3\0\6\16"+
    "\1\0\1\16\10\0\1\227\1\16\4\0\1\16\2\0"+
    "\1\16\1\230\4\16\1\167\12\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\231\10\0\2\16\4\0\1\16\2\0"+
    "\21\16\15\0\3\16\4\0\6\16\1\0\1\16\10\0"+
    "\1\175\1\16\4\0\1\16\2\0\1\16\1\176\7\16"+
    "\1\200\7\16\15\0\3\16\4\0\6\16\1\0\1\206"+
    "\10\0\1\207\1\16\4\0\1\16\2\0\5\16\1\211"+
    "\13\16\15\0\3\16\4\0\6\16\1\0\1\16\10\0"+
    "\2\16\4\0\1\16\2\0\2\16\1\212\1\16\1\157"+
    "\3\16\1\213\10\16\15\0\3\16\4\0\6\16\1\0"+
    "\1\16\10\0\2\16\4\0\1\16\2\0\14\16\1\220"+
    "\4\16\15\0\3\16\1\0\2\100\1\0\15\100\1\0"+
    "\4\100\1\0\1\100\1\0\46\100\20\232\1\0\4\232"+
    "\3\233\13\232\2\233\31\232\2\103\1\0\15\103\1\0"+
    "\5\103\2\0\46\103\2\104\1\0\15\104\1\0\6\104"+
    "\2\0\45\104\20\234\1\0\55\234\31\0\1\235\13\0"+
    "\1\235\3\0\1\235\20\0\1\235\14\0\1\236\126\0"+
    "\1\237\46\0\1\24\5\0\1\154\70\0\1\24\1\0"+
    "\1\24\74\0\1\24\76\0\1\24\2\0\1\154\72\0"+
    "\1\24\2\0\1\240\76\0\1\24\77\0\1\241\115\0"+
    "\1\242\54\0\1\243\116\0\1\244\101\0\1\245\50\0"+
    "\1\246\110\0\1\247\1\0\1\250\3\0\1\250\101\0"+
    "\1\251\40\0\1\24\2\0\1\24\41\0\1\24\46\0"+
    "\1\252\13\0\1\252\3\0\1\252\20\0\1\252\6\0"+
    "\6\16\1\0\1\16\10\0\1\16\1\253\4\0\1\16"+
    "\2\0\4\16\1\160\3\16\1\161\10\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\16\10\0\1\16\1\203\4\0"+
    "\1\16\2\0\14\16\1\254\4\16\15\0\1\205\2\16"+
    "\4\0\6\16\1\0\1\16\10\0\2\16\4\0\1\16"+
    "\2\0\2\16\1\212\1\16\1\157\3\16\1\255\10\16"+
    "\15\0\3\16\1\0\33\141\1\0\42\141\25\0\1\256"+
    "\76\0\1\257\53\0\2\260\74\0\2\261\5\0\1\262"+
    "\1\0\1\262\64\0\2\263\2\0\1\263\1\0\1\263"+
    "\21\0\2\263\1\0\2\263\32\0\1\263\5\0\6\16"+
    "\1\0\1\16\10\0\2\16\4\0\1\16\2\0\7\16"+
    "\1\264\6\16\1\265\2\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\16\10\0\2\16\4\0\1\16\2\0\2\16"+
    "\1\266\16\16\15\0\3\16\4\0\6\16\1\0\1\16"+
    "\10\0\2\16\4\0\1\16\2\0\5\16\1\267\13\16"+
    "\15\0\3\16\1\0\20\155\1\0\74\155\1\270\1\0"+
    "\55\155\3\0\6\16\1\0\1\16\10\0\2\16\4\0"+
    "\1\16\2\0\4\16\1\161\14\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\16\10\0\2\16\4\0\1\16\2\0"+
    "\7\16\1\271\11\16\15\0\3\16\26\0\1\272\76\0"+
    "\1\272\52\0\6\16\1\0\1\16\10\0\2\16\4\0"+
    "\1\16\2\0\10\16\1\273\10\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\16\10\0\2\16\4\0\1\16\2\0"+
    "\2\16\1\274\4\16\1\275\11\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\16\10\0\2\16\4\0\1\16\2\0"+
    "\1\16\1\276\17\16\15\0\3\16\4\0\6\16\1\0"+
    "\1\16\10\0\2\16\4\0\1\16\2\0\3\16\1\157"+
    "\15\16\15\0\3\16\4\0\6\16\1\0\1\16\10\0"+
    "\2\16\4\0\1\16\2\0\16\16\1\277\2\16\15\0"+
    "\3\16\4\0\6\16\1\0\1\16\10\0\2\16\4\0"+
    "\1\16\2\0\11\16\1\230\7\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\16\10\0\2\16\4\0\1\16\2\0"+
    "\4\16\1\300\1\16\1\301\12\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\16\10\0\1\16\1\157\4\0\1\16"+
    "\2\0\21\16\15\0\3\16\4\0\6\16\1\0\1\16"+
    "\10\0\2\16\4\0\1\16\2\0\6\16\1\302\12\16"+
    "\15\0\3\16\4\0\6\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\10\16\1\303\10\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\16\10\0\2\16\4\0\1\16"+
    "\2\0\10\16\1\304\10\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\16\10\0\2\16\4\0\1\16\2\0\6\16"+
    "\1\305\12\16\15\0\3\16\4\0\6\16\1\0\1\16"+
    "\10\0\2\16\4\0\1\16\2\0\7\16\1\174\11\16"+
    "\15\0\3\16\4\0\6\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\5\16\1\306\13\16\15\0\1\157"+
    "\2\16\4\0\6\16\1\0\1\16\10\0\1\16\1\307"+
    "\4\0\1\16\2\0\11\16\1\310\7\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\16\10\0\2\16\4\0\1\16"+
    "\2\0\16\16\1\311\2\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\16\10\0\2\16\4\0\1\16\2\0\13\16"+
    "\1\157\5\16\15\0\3\16\4\0\6\16\1\0\1\16"+
    "\10\0\2\16\4\0\1\16\2\0\7\16\1\157\11\16"+
    "\15\0\3\16\4\0\6\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\7\16\1\312\11\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\16\10\0\2\16\4\0\1\16"+
    "\2\0\6\16\1\313\12\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\16\10\0\2\16\4\0\1\16\2\0\10\16"+
    "\1\314\10\16\15\0\3\16\4\0\6\16\1\0\1\16"+
    "\10\0\2\16\4\0\1\16\2\0\2\16\1\315\16\16"+
    "\15\0\3\16\4\0\6\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\16\16\1\265\2\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\16\10\0\2\16\4\0\1\16"+
    "\2\0\11\16\1\316\7\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\16\10\0\1\16\1\174\4\0\1\16\2\0"+
    "\21\16\15\0\3\16\4\0\6\16\1\0\1\16\10\0"+
    "\2\16\4\0\1\16\2\0\7\16\1\317\11\16\15\0"+
    "\3\16\4\0\6\16\1\0\1\320\10\0\2\16\4\0"+
    "\1\16\2\0\11\16\1\321\7\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\322\10\0\2\16\4\0\1\16\2\0"+
    "\14\16\1\323\4\16\15\0\3\16\4\0\6\16\1\0"+
    "\1\16\10\0\2\16\4\0\1\16\2\0\2\16\1\161"+
    "\16\16\15\0\3\16\4\0\6\16\1\0\1\324\10\0"+
    "\2\16\4\0\1\16\2\0\21\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\16\10\0\2\16\4\0\1\16\2\0"+
    "\7\16\1\264\11\16\15\0\3\16\4\0\6\16\1\0"+
    "\1\16\3\0\1\325\4\0\2\16\4\0\1\16\2\0"+
    "\21\16\15\0\3\16\4\0\6\16\1\0\1\16\10\0"+
    "\2\16\4\0\1\16\2\0\10\16\1\326\10\16\15\0"+
    "\3\16\4\0\6\16\1\0\1\16\10\0\2\16\4\0"+
    "\1\16\2\0\7\16\1\275\11\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\16\10\0\2\16\4\0\1\16\2\0"+
    "\6\16\1\301\12\16\15\0\3\16\32\0\1\327\13\0"+
    "\1\327\3\0\1\327\20\0\1\327\14\0\1\24\122\0"+
    "\1\330\60\0\1\24\72\0\1\331\116\0\1\250\62\0"+
    "\1\250\113\0\1\332\45\0\1\333\126\0\1\250\76\0"+
    "\1\246\76\0\1\334\61\0\1\335\13\0\1\335\3\0"+
    "\1\335\20\0\1\335\6\0\6\16\1\0\1\16\3\0"+
    "\1\331\4\0\2\16\4\0\1\16\2\0\21\16\15\0"+
    "\3\16\4\0\6\16\1\0\1\336\10\0\1\16\1\307"+
    "\4\0\1\16\2\0\11\16\1\310\7\16\15\0\3\16"+
    "\26\0\1\337\76\0\1\337\53\0\2\260\4\0\1\147"+
    "\67\0\2\261\73\0\6\16\1\0\1\340\10\0\2\16"+
    "\4\0\1\16\2\0\21\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\16\10\0\1\341\1\16\4\0\1\16\2\0"+
    "\21\16\15\0\3\16\4\0\6\16\1\0\1\157\10\0"+
    "\2\16\4\0\1\16\2\0\21\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\16\10\0\2\16\4\0\1\16\2\0"+
    "\15\16\1\174\3\16\15\0\3\16\1\0\17\270\1\342"+
    "\1\343\55\270\3\0\6\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\5\16\1\344\13\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\16\10\0\2\16\4\0\1\16"+
    "\2\0\2\16\1\202\4\16\1\345\11\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\174\10\0\2\16\4\0\1\16"+
    "\2\0\21\16\15\0\3\16\4\0\6\16\1\0\1\16"+
    "\10\0\2\16\4\0\1\16\2\0\1\346\20\16\15\0"+
    "\3\16\4\0\6\16\1\0\1\16\10\0\2\16\4\0"+
    "\1\16\2\0\2\16\1\347\16\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\175\10\0\2\16\4\0\1\16\2\0"+
    "\21\16\15\0\3\16\4\0\6\16\1\0\1\16\10\0"+
    "\2\16\4\0\1\16\2\0\1\16\1\350\17\16\15\0"+
    "\3\16\4\0\6\16\1\0\1\351\10\0\2\16\4\0"+
    "\1\16\2\0\21\16\15\0\3\16\4\0\6\16\1\0"+
    "\1\16\10\0\2\16\4\0\1\16\2\0\2\16\1\306"+
    "\16\16\15\0\3\16\4\0\6\16\1\0\1\16\10\0"+
    "\2\16\4\0\1\16\2\0\1\352\20\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\16\10\0\2\16\4\0\1\16"+
    "\2\0\1\16\1\353\17\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\276\10\0\2\16\4\0\1\16\2\0\21\16"+
    "\15\0\3\16\4\0\6\16\1\0\1\161\10\0\2\16"+
    "\4\0\1\16\2\0\21\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\16\10\0\1\206\1\16\4\0\1\16\2\0"+
    "\21\16\15\0\3\16\4\0\6\16\1\0\1\16\10\0"+
    "\2\16\4\0\1\16\2\0\2\16\1\354\16\16\15\0"+
    "\3\16\4\0\6\16\1\0\1\355\10\0\2\16\4\0"+
    "\1\16\2\0\21\16\15\0\3\16\4\0\6\16\1\0"+
    "\1\16\10\0\2\16\4\0\1\16\2\0\11\16\1\356"+
    "\7\16\15\0\3\16\4\0\6\16\1\0\1\16\10\0"+
    "\2\16\4\0\1\16\2\0\6\16\1\354\12\16\15\0"+
    "\3\16\4\0\6\16\1\0\1\16\10\0\2\16\4\0"+
    "\1\16\2\0\7\16\1\357\11\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\16\10\0\2\16\4\0\1\16\2\0"+
    "\3\16\1\174\15\16\15\0\3\16\4\0\6\16\1\0"+
    "\1\16\10\0\2\16\4\0\1\16\2\0\14\16\1\174"+
    "\4\16\15\0\3\16\4\0\6\16\1\0\1\16\10\0"+
    "\1\16\1\266\4\0\1\16\2\0\10\16\1\157\10\16"+
    "\15\0\3\16\4\0\6\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\6\16\1\266\12\16\15\0\3\16"+
    "\4\0\3\16\1\360\2\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\21\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\16\10\0\2\16\4\0\1\16\2\0\1\16"+
    "\1\361\17\16\15\0\3\16\4\0\6\16\1\0\1\16"+
    "\10\0\2\16\4\0\1\16\2\0\1\16\1\362\17\16"+
    "\15\0\3\16\4\0\6\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\7\16\1\345\11\16\15\0\3\16"+
    "\32\0\1\363\13\0\1\363\3\0\1\363\20\0\1\363"+
    "\15\0\1\250\75\0\1\364\127\0\1\250\73\0\1\330"+
    "\64\0\1\365\13\0\1\365\3\0\1\365\20\0\1\365"+
    "\6\0\6\16\1\0\1\16\10\0\2\16\4\0\1\16"+
    "\2\0\10\16\1\157\10\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\16\10\0\2\16\4\0\1\16\2\0\10\16"+
    "\1\366\10\16\15\0\3\16\4\0\6\16\1\0\1\16"+
    "\10\0\1\16\1\202\4\0\1\16\2\0\21\16\15\0"+
    "\3\16\1\0\17\270\1\367\1\343\55\270\17\343\1\370"+
    "\56\343\3\0\6\16\1\0\1\16\10\0\1\16\1\336"+
    "\4\0\1\16\2\0\21\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\16\10\0\2\16\4\0\1\16\2\0\11\16"+
    "\1\371\7\16\15\0\3\16\4\0\6\16\1\0\1\16"+
    "\10\0\2\16\4\0\1\16\2\0\14\16\1\157\4\16"+
    "\15\0\3\16\4\0\6\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\2\16\1\157\16\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\16\10\0\2\16\4\0\1\16"+
    "\2\0\5\16\1\372\13\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\16\10\0\2\16\4\0\1\16\2\0\7\16"+
    "\1\266\11\16\15\0\3\16\4\0\6\16\1\0\1\16"+
    "\10\0\2\16\4\0\1\16\2\0\7\16\1\373\11\16"+
    "\15\0\3\16\4\0\6\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\6\16\1\374\12\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\16\10\0\1\375\1\16\4\0"+
    "\1\16\2\0\21\16\15\0\3\16\4\0\6\16\1\0"+
    "\1\16\10\0\2\16\4\0\1\16\2\0\12\16\1\274"+
    "\6\16\15\0\3\16\4\0\6\16\1\0\1\16\10\0"+
    "\2\16\4\0\1\16\2\0\1\16\1\376\17\16\15\0"+
    "\3\16\4\0\6\16\1\0\1\16\10\0\2\16\4\0"+
    "\1\16\2\0\7\16\1\377\11\16\15\0\3\16\4\0"+
    "\6\16\1\0\1\16\10\0\2\16\4\0\1\16\2\0"+
    "\2\16\1\u0100\16\16\15\0\3\16\4\0\6\16\1\0"+
    "\1\16\10\0\2\16\4\0\1\16\2\0\21\16\15\0"+
    "\2\16\1\157\32\0\1\u0101\13\0\1\u0101\3\0\1\u0101"+
    "\20\0\1\u0101\41\0\1\u0102\42\0\6\16\1\0\1\16"+
    "\10\0\2\16\4\0\1\16\2\0\3\16\1\347\15\16"+
    "\15\0\3\16\1\0\17\270\1\u0103\1\343\55\270\17\343"+
    "\1\u0104\56\343\3\0\6\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\10\16\1\u0105\10\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\16\10\0\2\16\4\0\1\16"+
    "\2\0\6\16\1\202\12\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\16\10\0\2\16\4\0\1\16\2\0\11\16"+
    "\1\u0106\7\16\15\0\3\16\4\0\6\16\1\0\1\16"+
    "\10\0\2\16\4\0\1\16\2\0\6\16\1\u0107\12\16"+
    "\15\0\3\16\4\0\6\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\4\16\1\157\14\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\16\10\0\2\16\4\0\1\16"+
    "\2\0\10\16\1\u0108\10\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\u0109\10\0\2\16\4\0\1\16\2\0\21\16"+
    "\15\0\3\16\4\0\6\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\20\16\1\u010a\15\0\3\16\37\0"+
    "\1\250\37\0\17\343\1\u010b\56\343\3\0\6\16\1\0"+
    "\1\16\10\0\2\16\4\0\1\16\2\0\5\16\1\266"+
    "\13\16\15\0\3\16\4\0\6\16\1\0\1\16\10\0"+
    "\1\u010c\1\16\4\0\1\16\2\0\21\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\16\10\0\2\16\4\0\1\16"+
    "\2\0\21\16\15\0\1\157\2\16\4\0\6\16\1\0"+
    "\1\16\10\0\2\16\4\0\1\16\2\0\1\311\20\16"+
    "\15\0\3\16\4\0\6\16\1\0\1\16\10\0\2\16"+
    "\4\0\1\16\2\0\10\16\1\u010d\10\16\15\0\3\16"+
    "\4\0\6\16\1\0\1\16\10\0\1\16\1\u010e\4\0"+
    "\1\16\2\0\21\16\15\0\3\16\4\0\6\16\1\0"+
    "\1\16\10\0\2\16\4\0\1\16\2\0\10\16\1\174"+
    "\10\16\15\0\3\16\4\0\6\16\1\0\1\16\10\0"+
    "\2\16\4\0\1\16\2\0\3\16\1\u010f\15\16\15\0"+
    "\3\16\4\0\6\16\1\0\1\16\10\0\1\u0110\1\16"+
    "\4\0\1\16\2\0\21\16\15\0\3\16\4\0\6\16"+
    "\1\0\1\16\10\0\2\16\4\0\1\16\2\0\2\16"+
    "\1\174\16\16\15\0\3\16\4\0\6\16\1\0\1\16"+
    "\10\0\2\16\4\0\1\16\2\0\16\16\1\174\2\16"+
    "\15\0\3\16\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14136];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\3\0\1\11\1\1\1\11\6\1\1\11"+
    "\6\1\1\11\17\1\7\11\2\1\2\11\13\1\1\11"+
    "\3\1\1\11\25\1\2\11\5\1\2\11\2\1\3\0"+
    "\3\1\1\11\6\1\2\0\41\1\1\11\3\1\3\11"+
    "\2\1\1\0\2\1\5\0\1\1\1\11\1\0\4\1"+
    "\2\0\2\1\1\0\7\1\1\11\32\1\1\11\2\1"+
    "\1\0\1\11\3\0\2\1\1\11\3\1\1\0\20\1"+
    "\1\0\1\11\2\1\1\0\10\1\1\11\1\0\1\1"+
    "\1\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }


  public _CoffeeScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _CoffeeScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.KEYWORD;
          }
        case 46: break;
        case 20: 
          { yybegin(NOUN_OR_VERB); return CoffeeScriptTokenTypes.LINE_TERMINATOR;
          }
        case 47: break;
        case 9: 
          { yybegin(DOUBLE_QUOTE_STRING); return CoffeeScriptTokenTypes.STRING;
          }
        case 48: break;
        case 34: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.FUNCTION;
          }
        case 49: break;
        case 41: 
          { return CoffeeScriptTokenTypes.REGULAR_EXPRESSION_LITERAL;
          }
        case 50: break;
        case 3: 
          { return CoffeeScriptTokenTypes.WHITESPACE;
          }
        case 51: break;
        case 16: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.BRACKET;
          }
        case 52: break;
        case 31: 
          { return CoffeeScriptTokenTypes.JAVASCRIPT;
          }
        case 53: break;
        case 18: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.BRACE;
          }
        case 54: break;
        case 36: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.BOOLEAN;
          }
        case 55: break;
        case 6: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.NUMBER;
          }
        case 56: break;
        case 42: 
          { yybegin(HEREDOCS); return CoffeeScriptTokenTypes.HEREDOCS;
          }
        case 57: break;
        case 39: 
          { return CoffeeScriptTokenTypes.BAD_CHARACTER;
          }
        case 58: break;
        case 15: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.PARENTHESIS;
          }
        case 59: break;
        case 4: 
          { return CoffeeScriptTokenTypes.LINE_TERMINATOR;
          }
        case 60: break;
        case 38: 
          { yypushback(1); yybegin(REGULAR_EXPRESSION); return CoffeeScriptTokenTypes.REGULAR_EXPRESSION;
          }
        case 61: break;
        case 19: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.BRACE;
          }
        case 62: break;
        case 40: 
          { return CoffeeScriptTokenTypes.STRING_LITERAL;
          }
        case 63: break;
        case 44: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.KEYWORD;
          }
        case 64: break;
        case 13: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.SEMI_COLON;
          }
        case 65: break;
        case 29: 
          { return CoffeeScriptTokenTypes.PARENTHESIS;
          }
        case 66: break;
        case 17: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.BRACKET;
          }
        case 67: break;
        case 43: 
          { yybegin(VERB);  return CoffeeScriptTokenTypes.HEREDOCS;
          }
        case 68: break;
        case 28: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.ASSIGNMENT;
          }
        case 69: break;
        case 12: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.PARENTHESIS;
          }
        case 70: break;
        case 14: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.ACCESSOR;
          }
        case 71: break;
        case 5: 
          { yybegin(NOUN_OR_VERB); return CoffeeScriptTokenTypes.IDENTIFIER;
          }
        case 72: break;
        case 7: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.OPERATOR;
          }
        case 73: break;
        case 25: 
          { yybegin(YYINITIAL); return CoffeeScriptTokenTypes.BAD_CHARACTER;
          }
        case 74: break;
        case 27: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.DOT;
          }
        case 75: break;
        case 1: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.REGULAR_EXPRESSION_FLAG;
          }
        case 76: break;
        case 11: 
          { yybegin(JAVASCRIPT); return CoffeeScriptTokenTypes.JAVASCRIPT;
          }
        case 77: break;
        case 23: 
          { yybegin(VERB); return CoffeeScriptTokenTypes.STRING;
          }
        case 78: break;
        case 33: 
          { return CoffeeScriptTokenTypes.HEREDOCS;
          }
        case 79: break;
        case 30: 
          { yybegin(NOUN); return CoffeeScriptTokenTypes.COMMA;
          }
        case 80: break;
        case 37: 
          { return CoffeeScriptTokenTypes.RESERVED_WORD;
          }
        case 81: break;
        case 21: 
          { return CoffeeScriptTokenTypes.ASSIGNMENT;
          }
        case 82: break;
        case 24: 
          { return CoffeeScriptTokenTypes.REGULAR_EXPRESSION;
          }
        case 83: break;
        case 45: 
          { return CoffeeScriptTokenTypes.BLOCK_COMMENT;
          }
        case 84: break;
        case 26: 
          { final int length = yytext().length();
        if (length > 1) {
            yypushback(length -1);
            yybegin(REGULAR_EXPRESSION_FLAG);
        } else {
            yybegin(VERB);
        }
        return CoffeeScriptTokenTypes.REGULAR_EXPRESSION;
          }
        case 85: break;
        case 2: 
          { yybegin(YYINITIAL);   return CoffeeScriptTokenTypes.BAD_CHARACTER;
          }
        case 86: break;
        case 10: 
          { yybegin(SINGLE_QUOTE_STRING); return CoffeeScriptTokenTypes.STRING;
          }
        case 87: break;
        case 32: 
          { yybegin(YYINITIAL); return CoffeeScriptTokenTypes.JAVASCRIPT;
          }
        case 88: break;
        case 22: 
          { return CoffeeScriptTokenTypes.STRING;
          }
        case 89: break;
        case 8: 
          { return CoffeeScriptTokenTypes.COMMENT;
          }
        case 90: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
